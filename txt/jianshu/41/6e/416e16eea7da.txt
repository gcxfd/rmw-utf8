Java并发编程之锁机制之ReentrantReadWriteLock（读写锁）
在前面的文章中，我们讲到了ReentrantLock(重入锁)，接下来我们讲线程访问。但是在写线程访问时，所有的读线程和其他的写线程均被阻塞。在阅读本片文章之前，希望你已阅读过以下几篇文章：
在具体了解
从整体图上来看，中分别声明了以下几个静态内部类：
在使用某些种类的的情况下，且所承担的操作开销高于同步开销时，这很值得一试。例如，以下是一个使用 TreeMap（我们假设预期它很大，并且能被同时访问） 的字典类。
class RWDictionary {
private final Map<String, Data> m = new TreeMap<String, Data>();
private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
private final Lock r = rwl.readLock();//获取读锁
private final Lock w = rwl.writeLock();//获取写锁
//读取Map中的对应key的数据
public Data get(String key) {
r.lock();
try { return m.get(key); }
finally { r.unlock(); }
}
//读取Map中所有的key
public String[] allKeys() {
r.lock();
try { return m.keySet().toArray(); }
finally { r.unlock(); }
}
//往Map中写数据
public Data put(String key, Data value) {
w.lock();
try { return m.put(key, value); }
finally { w.unlock(); }
}
//清空数据
public void clear() {
w.lock();
try { m.clear(); }
finally { w.unlock(); }
}
}
在上述例子中，我们分别对TreeMap中的读取操作进行了加锁的操作。当我们调用方法，去更新数据时，我们需要获取写锁。那么其他线程对于写锁与读锁的获取都将会被阻塞。只有当获取写锁的线程释放了锁之后。其他读写操作才能进行。
这里可能会有小伙伴会有疑问，，这里其实是为了保证数据可见性。如果不阻塞其他读写操作，假如读操作优先与写操作，那么在数据更新之前，读操作获取的数据与写操作更新后的数据就会产生不一致的情况。
需要注意的是：个读取锁。试图超出这些限制将导致锁方法抛出 Error。具体原因会在下文进行描述。
到现在为止，我们已经基本了解了的学习来说，要容易一点。
在前文中，我们介绍了方法去获取相应的锁时，我们会执行以下代码：
public void lock() { sync.acquireShared(1);}
也就是会调用又是什么呢？从其构造函数中我们也可以看出:
public ReentrantReadWriteLock(boolean fair) {
sync = fair ? new FairSync() : new NonfairSync();
readerLock = new ReadLock(this);
writerLock = new WriteLock(this);
}
其中关于的声明如下所示：
//同步队列
abstract static class Sync extends AbstractQueuedSynchronizer {省略部分代码...}
//非公平锁
static final class NonfairSync extends Sync{省略部分代码...}
//公平锁
static final class FairSync extends Sync {省略部分代码...}
这里我们又看到了我们熟悉的这两个锁，其实是通过AQS中的同步队列来对线程的进行控制的。那么结合我们之前的AQS的知识，我们可以得到下图：
（如果你对AQS不熟，那么你可以阅读该篇文章----->).
这里我省略了，这个问题留给大家。
虽然现在我们已经知道了，变量来表示当前的同步状态。那么其内部是怎么将两个读写状态分开，并且达到控制线程的目的的呢？
在，具体情况如下图所示：
在上图中，我们能得知，读写状态能表示的最大值为，也就是说允许锁重进入的次数为65535次。
接下来 我们单看高16位，这里表示当前线程已经获取了写锁，且重进入了七次。同样的这里如果我们也只但看低16位，那么就表示当前线程获取了读锁，且重进入了七次。。
到现在为止我们已经知道同步状态的划分，那接下来又有新的问题了。其实也非常简单。
也就是如下图所示（可能图片不是很清楚，建议在pc端上观看）：
在了解了的整体原理及读写状态的划分后，我们再来理解其内部的读写线程控制就容易的多了，下面的文章中，我会对读锁与写锁的获取分别进行讨论。
因为当调用方法，来判断能否获取写锁。那现在我们就来看看该方法的具体实现。具体代码如下所示：
protected final int tryAcquireShared(int unused) {
Thread current = Thread.currentThread();
int c = getState();
//（1）判断当前是否有写锁，有直接返回
if (exclusiveCount(c) != 0 &&
getExclusiveOwnerThread() != current)
return -1;
int r = sharedCount(c);
//(2)获取当前读锁的状态，判断是否小于最大值，
//同时根据公平锁，还是非公平锁的模式，判断当前线程是否需要阻塞，
if (!readerShouldBlock() &&
r < MAX_COUNT &&
compareAndSetState(c, c + SHARED_UNIT)) {
//（3)如果是不要阻塞，且写状态小于最大值，则设置当前线程重进入的次数
if (r == 0) {
//如果当前读状态为0，则设置当前读线程为，当前线程为第一个读线程。
firstReader = current;
firstReaderHoldCount = 1;
} else if (firstReader == current) {
//计算第一个读线程，重进入的次数
firstReaderHoldCount++;
} else {
//通过ThreadLocl获取读线程中进入的锁
HoldCounter rh = cachedHoldCounter;
if (rh == null || rh.tid != getThreadId(current))
cachedHoldCounter = rh = readHolds.get();
else if (rh.count == 0)
readHolds.set(rh);
rh.count++;
}
return 1;//获取共享同步状态成功
}
//(4)当获取读状态失败后，继续尝试获取读锁，
return fullTryAcquireShared(current);
}
在读锁的获取中，涉及到的方法较为复杂，所以下面会对每个步骤中涉及到的方法，进行介绍。
在读锁的获取中的步骤（1）中，代码中会调用中的方法，具体代码如下所示：
abstract static class Sync extends AbstractQueuedSynchronizer {
static final int SHARED_SHIFT   = 16;
static final int SHARED_UNIT    = (1 << SHARED_SHIFT);
static final int MAX_COUNT      = (1 << SHARED_SHIFT) - 1;//最大状态数为2的16次方-1
static final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1;
/*返回当前的读状态*/
static int sharedCount(int c)    { return c >>> SHARED_SHIFT; }
/*返回当前的写状态 */
static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }
}
从代码中我们可以看出，只是简单的执行了方法是不难理解的。
在步骤（2）中，我们发现调用了类中的抽象方法。在ReentrantReadWriteLock类中，公平锁与非公平锁进行了相应的实现，具体代码如下图所示：
//公平锁
static final class FairSync extends Sync {
private static final long serialVersionUID = -2274990926593161451L;
final boolean writerShouldBlock(){return hasQueuedPredecessors();}
final boolean readerShouldBlock(){return hasQueuedPredecessors();
}
}
//非公平锁
static final class NonfairSync extends Sync {
final boolean writerShouldBlock() { return false;}
final boolean readerShouldBlock() {return apparentlyFirstQueuedIsExclusive();}
}
这里就不再对公平锁与非公平锁进行分析了。在文章 中已经对这个知识点进行了分析。有兴趣的小伙伴可以参考该文章。
在ReentrantReadWriteLock类中分别定义了。也就是说，之所以单独定义一个变量来记录第一个获取获取写锁的线程，是为了在众多的读线程中区分线程，也是为了以后的调试与跟踪。
当我们解决了第一个问题后，现在我们来解决第二个问题。这里我就不在对第一个线程如何记录重进入次数进行分析了。我们直接看其他读线程的重进入次数设置。这里因为篇幅的限制，我就直接讲原理，其他线程的重进入的次数判断是通过类（用于记录当前线程获取锁的次数），来获取相应的次数。具体代码如下所示：
static final class HoldCounter {
int count;//记录当前线程进入的次数
final long tid = getThreadId(Thread.currentThread());
}
static final class ThreadLocalHoldCounter extends ThreadLocal<HoldCounter> {
public HoldCounter initialValue() {
return new HoldCounter();
}
}
private transient ThreadLocalHoldCounter readHolds;
如果有小伙伴不熟悉
当第一次获取读锁失败的时候，会调用方法会继续尝试获取锁。该函数返回的三个条件为：
具体代码如下所示：
final int fullTryAcquireShared(Thread current) {
HoldCounter rh = null;
for (;;) {//注意这里的for循环
int c = getState();
if (exclusiveCount(c) != 0) {//（1）存在写锁直接返回
if (getExclusiveOwnerThread() != current)
return -1;
} else if (readerShouldBlock()) {
// Make sure we're not acquiring read lock reentrantly
if (firstReader == current) {
// assert firstReaderHoldCount > 0;
} else {
if (rh == null) {
rh = cachedHoldCounter;
if (rh == null || rh.tid != getThreadId(current)) {
rh = readHolds.get();
if (rh.count == 0)
readHolds.remove();
}
}
if (rh.count == 0)
return -1;
}
}
if (sharedCount(c) == MAX_COUNT)//(2)锁迭代次数超过最大值。抛出异常
throw new Error("Maximum lock count exceeded");
if (compareAndSetState(c, c + SHARED_UNIT)) {//(3)获取锁成功，记录次数
if (sharedCount(c) == 0) {
firstReader = current;
firstReaderHoldCount = 1;
} else if (firstReader == current) {
firstReaderHoldCount++;
} else {
if (rh == null)
rh = cachedHoldCounter;
if (rh == null || rh.tid != getThreadId(current))
rh = readHolds.get();
else if (rh.count == 0)
readHolds.set(rh);
rh.count++;
cachedHoldCounter = rh; // cache for release
}
return 1;
}
}
}
因为该方法和上文提到的。
了解了读锁的获取，再来了解写锁的获取就非常简单了。写锁的获取最终会走方法。具体代码如下所示：
protected final boolean tryAcquire(int acquires) {
Thread current = Thread.currentThread();
//（1）获取同步状态 = 写状态+读状态，单独获取写状态
int c = getState();
int w = exclusiveCount(c);
//（2）如果c!=0则表示有线程操作
if (c != 0) {
// （2.1）没有写锁线程，则表示有读线程，则直接获取失败，并返回
if (w == 0 || current != getExclusiveOwnerThread())
return false;
//（2.2）如果w>0则，表示当前线程为写线程，则计算当前重进入的次数，如果已经饱和，则抛出异常
if (w + exclusiveCount(acquires) > MAX_COUNT)
throw new Error("Maximum lock count exceeded");
// （2.3）获取成功，直接记录当前写状态
setState(c + acquires);
return true;
}
//（3）没有线程获取读写锁，根据当前锁的模式与设置写状态是否成功，判断是否需要阻塞线程
if (writerShouldBlock() ||
!compareAndSetState(c, c + acquires))
return false;
//(4)第一次进入，获取成功
setExclusiveOwnerThread(current);
return true;
}
为了帮助大家理解，我这里将该方法分为了一下几个步骤：
相信结合以上步骤。再来理解代码就非常容易了。
读写锁除了保证写操作对读操作的可见性以及并发性的提升之外，读写锁也能简化读写交互的编程方式，试想一种情况，在程序中我们需要定义一个共享的用作缓存数据结构，并且其大部分时间提供读服务（例如查询和搜索），而写操作占有的时间很少，但是我们又希望写操作完成之后的更新需要对后续的读操作可见。那么该怎么实现呢？参看如下例子：
public class CachedData {
Object data;
volatile boolean cacheValid;
final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
void processCachedData() {
rwl.readLock().lock();
if (!cacheValid) {
//如果缓存过期，释放读锁，并获取写锁
rwl.readLock().unlock();
rwl.writeLock().lock();（1）
try {
//重新检查缓存是否过期，因为有可能在当前线程操作之前，其他写线程有可能改变缓存状态
if (!cacheValid) {
data = ...//重新写入数据
cacheValid = true;
}
// 获取读锁
rwl.readLock().lock();（2）
} finally {
//释放写锁
rwl.writeLock().unlock(); （3）
}
}
try {
use(data);//操作使用数据
} finally {
rwl.readLock().unlock();//最后释放读锁
}
}
}
在上述例子中，如果数据缓存过期，也就是cacheValid变量（volatile 修饰的布尔类型）被设置为false，那么所有调用processCachedData（）方法的线程都能感知到变化，但是只有一个线程能过获取到写锁。其他线程会被阻塞在读锁和写锁的lock()方法上。当前线程获取写锁完成数据准备之后，再获取读锁，随后释放写锁（上述代码的（1）（2）（3）三个步骤），。
那接下来，我个问题想问大家，，其实原因很简单，如果当前线程直接释放写锁，那么这个时候如果有其他线程获取了写锁，并修改了数据。那么对于当前释放写锁的线程是无法感知数据变化的。先获取读锁的目的，就是保证没有其他线程来修改数据啦。